
cdecv_monitor.elf:     file format elf32-littlenios2
cdecv_monitor.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000c30 memsz 0x00000c44 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001c50  2**0
                  CONTENTS
  2 .text         00000b50  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  00008b70  00008b70  00001b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000078  00008bd8  00008bd8  00001bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  00008c50  00008c50  00001c50  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00008c64  00008c64  00001c50  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a0  00000000  00000000  00001c78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002564  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000010ae  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000f22  00000000  00000000  0000552a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005cc  00000000  00000000  0000644c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b6b  00000000  00000000  00006a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b25  00000000  00000000  00007583  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000080a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000068  00000000  00000000  000080b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00009498  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0000949b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000094aa  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000094ab  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000094ac  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000094b0  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000094b4  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000094b8  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  000094c3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  000094c7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  000094cb  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000036  00000000  00000000  000094d2  2**0
                  CONTENTS, READONLY
 29 .jdi          00004323  00000000  00000000  00009508  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006191a  00000000  00000000  0000d82b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008b70 l    d  .rodata	00000000 .rodata
00008bd8 l    d  .rwdata	00000000 .rwdata
00008c50 l    d  .bss	00000000 .bss
00008c64 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cdecv_monitor_bsp//obj/HAL/src/crt0.o
00008054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memory_data.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 memory.c
00000000 l    df *ABS*	00000000 reset.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 hexchar_int.c
00008bb2 l     O .rodata	00000017 CSWTCH.1
00008ba2 l     O .rodata	00000010 CSWTCH.5
00000000 l    df *ABS*	00000000 hexformat.c
00000000 l    df *ABS*	00000000 monitor_command.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008b44 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
000089a0 g     F .text	0000002c alt_main
0000863c g     F .text	0000007c getstr
000086f0 g     F .text	00000074 hex2chars_to_int
0000812c g     F .text	00000008 do_default
0000855c g     F .text	0000000c negate_clock
000080c8 g     F .text	00000038 do_RM
00008c30 g     O .rwdata	00000004 EOF
000089cc g     F .text	00000038 alt_putstr
00008b4c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008830 g     F .text	00000018 address_of_hexformat
00008820 g     F .text	00000010 bytecount_of_hexformat
00008000 g     F .entry	0000000c __reset
000087fc g     F .text	00000024 hex_nth_digit
000086b8 g     F .text	00000004 putstr
0000839c g     F .text	000001b0 memorydata_to_hexformat
00008c60 g     O .bss	00000004 errno
00008c54 g     O .bss	00000004 alt_argv
00010c30 g       *ABS*	00000000 _gp
00008bd8 g     O .rwdata	00000030 alt_fd_list
0000854c g     F .text	00000010 assert_clock
000080ac g     F .text	0000001c do_NC
000081dc g     F .text	0000006c write_memory
00008248 g     F .text	0000006c read_memory
00008c38 g     O .rwdata	00000004 alt_max_fd
00008568 g     F .text	00000010 assert_prg_we
00008c64 g       *ABS*	00000000 __bss_end
0000895c g     F .text	00000044 alt_getchar
00008100 g     F .text	0000002c do_WM
00008884 g     F .text	0000003c checksum_of_hexformat
000085ec g     F .text	00000030 memory_rd
00008c08 g     O .rwdata	00000028 alt_dev_null
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
00008c3c g     O .rwdata	00000008 alt_dev_list
00008c5c g     O .bss	00000004 jtag_uart_0
00008090 g     F .text	0000001c do_AC
00008c64 g       *ABS*	00000000 end
00008ab4 g     F .text	00000090 altera_avalon_uart_write
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008584 g     F .text	00000010 assert_prg_clock
00008020 g     F .text	00000038 _start
00008a24 g     F .text	00000004 alt_sys_init
00008578 g     F .text	0000000c negate_prg_we
00008c64 g       *ABS*	00000000 __alt_stack_base
000086bc g     F .text	00000004 tx_str
00008848 g     F .text	00000010 recordtype_of_hexformat
00008074 g     F .text	0000001c do_NR
000086c4 g     F .text	0000002c hexchar_to_int
00008c50 g       *ABS*	00000000 __bss_start
00008134 g     F .text	000000a8 main
00008c50 g     O .bss	00000004 alt_envp
00008638 g     F .text	00000004 getchar
00008c4c g     O .rwdata	00000004 alt_errno
00008764 g     F .text	00000098 hex4chars_to_int
00008a04 g     F .text	00000020 alt_irq_init
000086c0 g     F .text	00000004 rx_str
00008314 g     F .text	00000088 hexformat_to_memorydata
0000862c g     F .text	0000000c negate_reset
00008c58 g     O .bss	00000004 alt_argc
00008c44 g     O .rwdata	00000008 alt_fs_list
00008594 g     F .text	0000000c negate_prg_clock
00008c50 g       *ABS*	00000000 _edata
00008c64 g       *ABS*	00000000 _end
00008938 g     F .text	00000024 unique
00008858 g     F .text	0000002c data_of_hexformat
000082b4 g     F .text	00000060 checksum_of_memorydata
0000861c g     F .text	00000010 assert_reset
00010000 g       *ABS*	00000000 __alt_data_end
00008c34 g     O .rwdata	00000004 uart
0000800c g       .entry	00000000 _exit
00008b54 g     F .text	0000001c strlen
00008a28 g     F .text	0000008c altera_avalon_uart_read
00008058 g     F .text	0000001c do_AR
000085a0 g     F .text	0000004c memory_wd
000088c0 g     F .text	00000078 monitor_command



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6830c14 	ori	gp,gp,3120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a31414 	ori	r2,r2,35920

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e31914 	ori	r3,r3,35940

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7414>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8050:	00089a00 	call	89a0 <alt_main>

00008054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8054:	003fff06 	br	8054 <_gp+0xffff7424>

00008058 <do_AR>:
}


//////

void do_AR() {
    8058:	deffff04 	addi	sp,sp,-4
    805c:	dfc00015 	stw	ra,0(sp)
  assert_reset();
    8060:	000861c0 	call	861c <assert_reset>
  tx_str(EOF);
    8064:	d1200017 	ldw	r4,-32768(gp)
}
    8068:	dfc00017 	ldw	ra,0(sp)
    806c:	dec00104 	addi	sp,sp,4

//////

void do_AR() {
  assert_reset();
  tx_str(EOF);
    8070:	00086bc1 	jmpi	86bc <tx_str>

00008074 <do_NR>:
}

void do_NR() {
    8074:	deffff04 	addi	sp,sp,-4
    8078:	dfc00015 	stw	ra,0(sp)
  negate_reset();
    807c:	000862c0 	call	862c <negate_reset>
  tx_str(EOF);
    8080:	d1200017 	ldw	r4,-32768(gp)
}
    8084:	dfc00017 	ldw	ra,0(sp)
    8088:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_NR() {
  negate_reset();
  tx_str(EOF);
    808c:	00086bc1 	jmpi	86bc <tx_str>

00008090 <do_AC>:
}

void do_AC() {
    8090:	deffff04 	addi	sp,sp,-4
    8094:	dfc00015 	stw	ra,0(sp)
  assert_clock();
    8098:	000854c0 	call	854c <assert_clock>
  tx_str(EOF);
    809c:	d1200017 	ldw	r4,-32768(gp)
}
    80a0:	dfc00017 	ldw	ra,0(sp)
    80a4:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_AC() {
  assert_clock();
  tx_str(EOF);
    80a8:	00086bc1 	jmpi	86bc <tx_str>

000080ac <do_NC>:
}

void do_NC(){
    80ac:	deffff04 	addi	sp,sp,-4
    80b0:	dfc00015 	stw	ra,0(sp)
  negate_clock();
    80b4:	000855c0 	call	855c <negate_clock>
  tx_str(EOF);
    80b8:	d1200017 	ldw	r4,-32768(gp)
}
    80bc:	dfc00017 	ldw	ra,0(sp)
    80c0:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_NC(){
  negate_clock();
  tx_str(EOF);
    80c4:	00086bc1 	jmpi	86bc <tx_str>

000080c8 <do_RM>:
}

void do_RM(const char* hf) {
    80c8:	deff3904 	addi	sp,sp,-796
  MemoryData md;
  char tx_msg[522];

  hexformat_to_memorydata(hf, &md);
    80cc:	d9408304 	addi	r5,sp,524
void do_NC(){
  negate_clock();
  tx_str(EOF);
}

void do_RM(const char* hf) {
    80d0:	dfc0c615 	stw	ra,792(sp)
  MemoryData md;
  char tx_msg[522];

  hexformat_to_memorydata(hf, &md);
    80d4:	00083140 	call	8314 <hexformat_to_memorydata>
  read_memory(&md);
    80d8:	d9008304 	addi	r4,sp,524
    80dc:	00082480 	call	8248 <read_memory>
  memorydata_to_hexformat(&md, tx_msg);
    80e0:	d9008304 	addi	r4,sp,524
    80e4:	d80b883a 	mov	r5,sp
    80e8:	000839c0 	call	839c <memorydata_to_hexformat>
  tx_str(tx_msg);
    80ec:	d809883a 	mov	r4,sp
    80f0:	00086bc0 	call	86bc <tx_str>
}
    80f4:	dfc0c617 	ldw	ra,792(sp)
    80f8:	dec0c704 	addi	sp,sp,796
    80fc:	f800283a 	ret

00008100 <do_WM>:

void do_WM(const char* hf) {
    8100:	deffbc04 	addi	sp,sp,-272
  MemoryData md;

  hexformat_to_memorydata(hf, &md);
    8104:	d80b883a 	mov	r5,sp
  read_memory(&md);
  memorydata_to_hexformat(&md, tx_msg);
  tx_str(tx_msg);
}

void do_WM(const char* hf) {
    8108:	dfc04315 	stw	ra,268(sp)
  MemoryData md;

  hexformat_to_memorydata(hf, &md);
    810c:	00083140 	call	8314 <hexformat_to_memorydata>
  write_memory(&md);
    8110:	d809883a 	mov	r4,sp
    8114:	00081dc0 	call	81dc <write_memory>
  tx_str(EOF);
    8118:	d1200017 	ldw	r4,-32768(gp)
    811c:	00086bc0 	call	86bc <tx_str>
}
    8120:	dfc04317 	ldw	ra,268(sp)
    8124:	dec04404 	addi	sp,sp,272
    8128:	f800283a 	ret

0000812c <do_default>:

void do_default() {
  tx_str(EOF);
    812c:	d1200017 	ldw	r4,-32768(gp)
    8130:	00086bc1 	jmpi	86bc <tx_str>

00008134 <main>:
void do_default();
//////////


int main()
{ 
    8134:	deff6704 	addi	sp,sp,-612
  char rx_msg[600];

  alt_putstr("Hello, This is Tiny MIPS monitor!\r\n");
    8138:	01000074 	movhi	r4,1
void do_default();
//////////


int main()
{ 
    813c:	dc409715 	stw	r17,604(sp)
  char rx_msg[600];

  alt_putstr("Hello, This is Tiny MIPS monitor!\r\n");
    8140:	2122dc04 	addi	r4,r4,-29840
  while (1) {
    rx_str(rx_msg);

    switch (monitor_command(rx_msg)) {
    8144:	04400074 	movhi	r17,1
void do_default();
//////////


int main()
{ 
    8148:	dc009615 	stw	r16,600(sp)
    814c:	dfc09815 	stw	ra,608(sp)

  alt_putstr("Hello, This is Tiny MIPS monitor!\r\n");
  while (1) {
    rx_str(rx_msg);

    switch (monitor_command(rx_msg)) {
    8150:	04000144 	movi	r16,5

int main()
{ 
  char rx_msg[600];

  alt_putstr("Hello, This is Tiny MIPS monitor!\r\n");
    8154:	00089cc0 	call	89cc <alt_putstr>
  while (1) {
    rx_str(rx_msg);

    switch (monitor_command(rx_msg)) {
    8158:	8c606104 	addi	r17,r17,-32380
{ 
  char rx_msg[600];

  alt_putstr("Hello, This is Tiny MIPS monitor!\r\n");
  while (1) {
    rx_str(rx_msg);
    815c:	d809883a 	mov	r4,sp
    8160:	00086c00 	call	86c0 <rx_str>

    switch (monitor_command(rx_msg)) {
    8164:	d809883a 	mov	r4,sp
    8168:	00088c00 	call	88c0 <monitor_command>
    816c:	10bfffc4 	addi	r2,r2,-1
    8170:	80801836 	bltu	r16,r2,81d4 <main+0xa0>
    8174:	100490ba 	slli	r2,r2,2
    8178:	1445883a 	add	r2,r2,r17
    817c:	10800017 	ldw	r2,0(r2)
    8180:	1000683a 	jmp	r2
    8184:	0000819c 	xori	zero,zero,518
    8188:	000081a4 	muli	zero,zero,518
    818c:	000081ac 	andhi	zero,zero,518
    8190:	000081b4 	movhi	zero,518
    8194:	000081bc 	xorhi	zero,zero,518
    8198:	000081c8 	cmpgei	zero,zero,519
      case MONITOR_COMMAND_AR:  // assert reset
        do_AR();            break;
    819c:	00080580 	call	8058 <do_AR>
    81a0:	003fee06 	br	815c <_gp+0xffff752c>
      case MONITOR_COMMAND_NR:  // negate reset
        do_NR();            break;
    81a4:	00080740 	call	8074 <do_NR>
    81a8:	003fec06 	br	815c <_gp+0xffff752c>
      case MONITOR_COMMAND_AC:  // assert clock
        do_AC();            break;
    81ac:	00080900 	call	8090 <do_AC>
    81b0:	003fea06 	br	815c <_gp+0xffff752c>
      case MONITOR_COMMAND_NC:  // negate clock
        do_NC() ;           break;
    81b4:	00080ac0 	call	80ac <do_NC>
    81b8:	003fe806 	br	815c <_gp+0xffff752c>
      case MONITOR_COMMAND_RM:  // read memory
        do_RM(&rx_msg[2]);   break;
    81bc:	d9000084 	addi	r4,sp,2
    81c0:	00080c80 	call	80c8 <do_RM>
    81c4:	003fe506 	br	815c <_gp+0xffff752c>
      case MONITOR_COMMAND_WM:  // write memory
        do_WM(&rx_msg[2]);   break;
    81c8:	d9000084 	addi	r4,sp,2
    81cc:	00081000 	call	8100 <do_WM>
    81d0:	003fe206 	br	815c <_gp+0xffff752c>
      default:
        do_default();       break;
    81d4:	000812c0 	call	812c <do_default>
    81d8:	003fe006 	br	815c <_gp+0xffff752c>

000081dc <write_memory>:

#include "memory_data.h"


//////////////
void write_memory(const MemoryData* md) {
    81dc:	defffb04 	addi	sp,sp,-20
    81e0:	dcc00315 	stw	r19,12(sp)
    81e4:	dc800215 	stw	r18,8(sp)
  const int bytecount = md->bytecount;
  const int address = md->address;
    81e8:	24c00117 	ldw	r19,4(r4)
#include "memory_data.h"


//////////////
void write_memory(const MemoryData* md) {
  const int bytecount = md->bytecount;
    81ec:	24800017 	ldw	r18,0(r4)

#include "memory_data.h"


//////////////
void write_memory(const MemoryData* md) {
    81f0:	dc400115 	stw	r17,4(sp)
    81f4:	dc000015 	stw	r16,0(sp)
    81f8:	dfc00415 	stw	ra,16(sp)
    81fc:	24000304 	addi	r16,r4,12
  const int bytecount = md->bytecount;
  const int address = md->address;
  int count = 0;

  for (count = 0; count < bytecount; ++count) {
    8200:	0023883a 	mov	r17,zero
    8204:	8c80090e 	bge	r17,r18,822c <write_memory+0x50>
    8208:	8cc9883a 	add	r4,r17,r19
    memory_wd(address + count, md->data[count]);
    820c:	81400007 	ldb	r5,0(r16)
    8210:	21003fcc 	andi	r4,r4,255
    8214:	2100201c 	xori	r4,r4,128
    8218:	213fe004 	addi	r4,r4,-128
    821c:	00085a00 	call	85a0 <memory_wd>
void write_memory(const MemoryData* md) {
  const int bytecount = md->bytecount;
  const int address = md->address;
  int count = 0;

  for (count = 0; count < bytecount; ++count) {
    8220:	8c400044 	addi	r17,r17,1
    8224:	84000044 	addi	r16,r16,1
    8228:	003ff606 	br	8204 <_gp+0xffff75d4>
    memory_wd(address + count, md->data[count]);
  }
}
    822c:	dfc00417 	ldw	ra,16(sp)
    8230:	dcc00317 	ldw	r19,12(sp)
    8234:	dc800217 	ldw	r18,8(sp)
    8238:	dc400117 	ldw	r17,4(sp)
    823c:	dc000017 	ldw	r16,0(sp)
    8240:	dec00504 	addi	sp,sp,20
    8244:	f800283a 	ret

00008248 <read_memory>:

void read_memory(MemoryData* md) {
    8248:	defffb04 	addi	sp,sp,-20
    824c:	dcc00315 	stw	r19,12(sp)
    8250:	dc800215 	stw	r18,8(sp)
  const int bytecount = md->bytecount;
  const int address = md->address;
    8254:	24c00117 	ldw	r19,4(r4)
    memory_wd(address + count, md->data[count]);
  }
}

void read_memory(MemoryData* md) {
  const int bytecount = md->bytecount;
    8258:	24800017 	ldw	r18,0(r4)
  for (count = 0; count < bytecount; ++count) {
    memory_wd(address + count, md->data[count]);
  }
}

void read_memory(MemoryData* md) {
    825c:	dc400115 	stw	r17,4(sp)
    8260:	dc000015 	stw	r16,0(sp)
    8264:	dfc00415 	stw	ra,16(sp)
    8268:	24000304 	addi	r16,r4,12
  const int bytecount = md->bytecount;
  const int address = md->address;
  int count = 0;

  for (count = 0; count < bytecount; ++count) {
    826c:	0023883a 	mov	r17,zero
    8270:	8c80090e 	bge	r17,r18,8298 <read_memory+0x50>
    8274:	8cc9883a 	add	r4,r17,r19
    md->data[count] = memory_rd(address + count);
    8278:	21003fcc 	andi	r4,r4,255
    827c:	2100201c 	xori	r4,r4,128
    8280:	213fe004 	addi	r4,r4,-128
    8284:	00085ec0 	call	85ec <memory_rd>
    8288:	80800005 	stb	r2,0(r16)
void read_memory(MemoryData* md) {
  const int bytecount = md->bytecount;
  const int address = md->address;
  int count = 0;

  for (count = 0; count < bytecount; ++count) {
    828c:	8c400044 	addi	r17,r17,1
    8290:	84000044 	addi	r16,r16,1
    8294:	003ff606 	br	8270 <_gp+0xffff7640>
    md->data[count] = memory_rd(address + count);
  }
}
    8298:	dfc00417 	ldw	ra,16(sp)
    829c:	dcc00317 	ldw	r19,12(sp)
    82a0:	dc800217 	ldw	r18,8(sp)
    82a4:	dc400117 	ldw	r17,4(sp)
    82a8:	dc000017 	ldw	r16,0(sp)
    82ac:	dec00504 	addi	sp,sp,20
    82b0:	f800283a 	ret

000082b4 <checksum_of_memorydata>:

//////////////

char checksum_of_memorydata(const MemoryData* md) {
  const int bytecount = md->bytecount / 4;
    82b4:	20800017 	ldw	r2,0(r4)
    82b8:	1007883a 	mov	r3,r2
    82bc:	1000010e 	bge	r2,zero,82c4 <checksum_of_memorydata+0x10>
    82c0:	10c000c4 	addi	r3,r2,3
    82c4:	180dd0ba 	srai	r6,r3,2
  int count = 0;
  char sum = 0;
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
    82c8:	20c00117 	ldw	r3,4(r4)
  sum += (char)((0xff00 & md->address) >> 8);
  sum += (0xf & md->recordtype);
    82cc:	21400217 	ldw	r5,8(r4)
    82d0:	1885883a 	add	r2,r3,r2
  const int bytecount = md->bytecount / 4;
  int count = 0;
  char sum = 0;
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
  sum += (char)((0xff00 & md->address) >> 8);
    82d4:	18ffc00c 	andi	r3,r3,65280
    82d8:	1807d23a 	srai	r3,r3,8
  sum += (0xf & md->recordtype);
    82dc:	294003cc 	andi	r5,r5,15
    82e0:	1145883a 	add	r2,r2,r5
    82e4:	017ffd04 	movi	r5,-12
    82e8:	10c5883a 	add	r2,r2,r3
    82ec:	20c00304 	addi	r3,r4,12
    82f0:	2909c83a 	sub	r4,r5,r4
    82f4:	20cb883a 	add	r5,r4,r3
  for (count = 0; count < bytecount; ++count) {
    82f8:	2980040e 	bge	r5,r6,830c <checksum_of_memorydata+0x58>
    sum += md->data[count];
    82fc:	19400003 	ldbu	r5,0(r3)
    8300:	18c00044 	addi	r3,r3,1
    8304:	2885883a 	add	r2,r5,r2
    8308:	003ffa06 	br	82f4 <_gp+0xffff76c4>
  }
  return (char)(0xff & (~sum + 1));
}
    830c:	0085c83a 	sub	r2,zero,r2
    8310:	f800283a 	ret

00008314 <hexformat_to_memorydata>:

///////////////////

void hexformat_to_memorydata(const char* hf, MemoryData* md) {
    8314:	defffb04 	addi	sp,sp,-20
    8318:	dfc00415 	stw	ra,16(sp)
    831c:	dcc00315 	stw	r19,12(sp)
    8320:	dc800215 	stw	r18,8(sp)
    8324:	2027883a 	mov	r19,r4
    8328:	dc400115 	stw	r17,4(sp)
    832c:	dc000015 	stw	r16,0(sp)
    8330:	2821883a 	mov	r16,r5
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
    8334:	00088200 	call	8820 <bytecount_of_hexformat>
  md->address    = address_of_hexformat(hf);
    8338:	9809883a 	mov	r4,r19
///////////////////

void hexformat_to_memorydata(const char* hf, MemoryData* md) {
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
    833c:	80800015 	stw	r2,0(r16)
  md->address    = address_of_hexformat(hf);
    8340:	00088300 	call	8830 <address_of_hexformat>
    8344:	80800115 	stw	r2,4(r16)
  md->recordtype = recordtype_of_hexformat(hf);
    8348:	9809883a 	mov	r4,r19
    834c:	00088480 	call	8848 <recordtype_of_hexformat>
    8350:	04bffd04 	movi	r18,-12
    8354:	80800215 	stw	r2,8(r16)
    8358:	84400304 	addi	r17,r16,12
    835c:	9425c83a 	sub	r18,r18,r16
  for (i = 0; i < md->bytecount; ++i) {
    8360:	80800017 	ldw	r2,0(r16)
    8364:	944b883a 	add	r5,r18,r17
    8368:	2880050e 	bge	r5,r2,8380 <hexformat_to_memorydata+0x6c>
    md->data[i] = data_of_hexformat(hf, i);
    836c:	9809883a 	mov	r4,r19
    8370:	00088580 	call	8858 <data_of_hexformat>
    8374:	88800005 	stb	r2,0(r17)
    8378:	8c400044 	addi	r17,r17,1
    837c:	003ff806 	br	8360 <_gp+0xffff7730>
  }
}
    8380:	dfc00417 	ldw	ra,16(sp)
    8384:	dcc00317 	ldw	r19,12(sp)
    8388:	dc800217 	ldw	r18,8(sp)
    838c:	dc400117 	ldw	r17,4(sp)
    8390:	dc000017 	ldw	r16,0(sp)
    8394:	dec00504 	addi	sp,sp,20
    8398:	f800283a 	ret

0000839c <memorydata_to_hexformat>:

void memorydata_to_hexformat(const MemoryData* md, char* hf) {
    839c:	defff804 	addi	sp,sp,-32
    83a0:	dfc00715 	stw	ra,28(sp)
    83a4:	dd800615 	stw	r22,24(sp)
    83a8:	dd400515 	stw	r21,20(sp)
    83ac:	dd000415 	stw	r20,16(sp)
    83b0:	dcc00315 	stw	r19,12(sp)
    83b4:	dc800215 	stw	r18,8(sp)
    83b8:	dc400115 	stw	r17,4(sp)
    83bc:	dc000015 	stw	r16,0(sp)
    83c0:	2023883a 	mov	r17,r4
    83c4:	2821883a 	mov	r16,r5
  int i = 0;
  int checksum = (int)checksum_of_memorydata(md);
    83c8:	00082b40 	call	82b4 <checksum_of_memorydata>
    83cc:	14c03fcc 	andi	r19,r2,255

  hf[0] = ':';
    83d0:	00800e84 	movi	r2,58
    83d4:	80800005 	stb	r2,0(r16)
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
    83d8:	89000017 	ldw	r4,0(r17)
    83dc:	01400044 	movi	r5,1
  }
}

void memorydata_to_hexformat(const MemoryData* md, char* hf) {
  int i = 0;
  int checksum = (int)checksum_of_memorydata(md);
    83e0:	9cc0201c 	xori	r19,r19,128

  hf[0] = ':';
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
    83e4:	00087fc0 	call	87fc <hex_nth_digit>
    83e8:	80800045 	stb	r2,1(r16)
  hf[2] = hex_nth_digit(md->bytecount, 0);
    83ec:	89000017 	ldw	r4,0(r17)
    83f0:	000b883a 	mov	r5,zero
    83f4:	053ffd04 	movi	r20,-12
    83f8:	00087fc0 	call	87fc <hex_nth_digit>
    83fc:	80800085 	stb	r2,2(r16)
  // address
  hf[3] = hex_nth_digit(md->address, 3);
    8400:	89000117 	ldw	r4,4(r17)
    8404:	014000c4 	movi	r5,3
  }
}

void memorydata_to_hexformat(const MemoryData* md, char* hf) {
  int i = 0;
  int checksum = (int)checksum_of_memorydata(md);
    8408:	9cffe004 	addi	r19,r19,-128
  hf[0] = ':';
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
  hf[2] = hex_nth_digit(md->bytecount, 0);
  // address
  hf[3] = hex_nth_digit(md->address, 3);
    840c:	00087fc0 	call	87fc <hex_nth_digit>
    8410:	808000c5 	stb	r2,3(r16)
  hf[4] = hex_nth_digit(md->address, 2);
    8414:	89000117 	ldw	r4,4(r17)
    8418:	01400084 	movi	r5,2
    841c:	8c800304 	addi	r18,r17,12
    8420:	00087fc0 	call	87fc <hex_nth_digit>
    8424:	80800105 	stb	r2,4(r16)
  hf[5] = hex_nth_digit(md->address, 1);
    8428:	89000117 	ldw	r4,4(r17)
    842c:	01400044 	movi	r5,1
    8430:	85400244 	addi	r21,r16,9
    8434:	00087fc0 	call	87fc <hex_nth_digit>
    8438:	80800145 	stb	r2,5(r16)
  hf[6] = hex_nth_digit(md->address, 0);
    843c:	89000117 	ldw	r4,4(r17)
    8440:	000b883a 	mov	r5,zero
    8444:	85800284 	addi	r22,r16,10
    8448:	00087fc0 	call	87fc <hex_nth_digit>
    844c:	80800185 	stb	r2,6(r16)
  // recordtype
  hf[7] = hex_nth_digit(md->recordtype, 1);
    8450:	89000217 	ldw	r4,8(r17)
    8454:	01400044 	movi	r5,1
    8458:	a469c83a 	sub	r20,r20,r17
    845c:	00087fc0 	call	87fc <hex_nth_digit>
    8460:	808001c5 	stb	r2,7(r16)
  hf[8] = hex_nth_digit(md->recordtype, 0);
    8464:	89000217 	ldw	r4,8(r17)
    8468:	000b883a 	mov	r5,zero
    846c:	00087fc0 	call	87fc <hex_nth_digit>
    8470:	80800205 	stb	r2,8(r16)
  // data
  for (i = 0; i < md->bytecount; ++i) {
    8474:	88c00017 	ldw	r3,0(r17)
    8478:	a485883a 	add	r2,r20,r18
    847c:	10c00c0e 	bge	r2,r3,84b0 <memorydata_to_hexformat+0x114>
    hf[9 + 2 * i + 0] = hex_nth_digit(md->data[i], 1);
    8480:	91000007 	ldb	r4,0(r18)
    8484:	01400044 	movi	r5,1
    8488:	94800044 	addi	r18,r18,1
    848c:	00087fc0 	call	87fc <hex_nth_digit>
    8490:	a8800005 	stb	r2,0(r21)
    hf[9 + 2 * i + 1] = hex_nth_digit(md->data[i], 0);
    8494:	913fffc7 	ldb	r4,-1(r18)
    8498:	000b883a 	mov	r5,zero
    849c:	ad400084 	addi	r21,r21,2
    84a0:	00087fc0 	call	87fc <hex_nth_digit>
    84a4:	b0800005 	stb	r2,0(r22)
    84a8:	b5800084 	addi	r22,r22,2
    84ac:	003ff106 	br	8474 <_gp+0xffff7844>
  }
  // checksum
  hf[9 + 2 * md->bytecount + 0] = hex_nth_digit(checksum, 1);
    84b0:	18c7883a 	add	r3,r3,r3
    84b4:	1c800244 	addi	r18,r3,9
    84b8:	9809883a 	mov	r4,r19
    84bc:	01400044 	movi	r5,1
    84c0:	00087fc0 	call	87fc <hex_nth_digit>
    84c4:	84a5883a 	add	r18,r16,r18
    84c8:	90800005 	stb	r2,0(r18)
  hf[9 + 2 * md->bytecount + 1] = hex_nth_digit(checksum, 0);
    84cc:	88c00017 	ldw	r3,0(r17)
    84d0:	9809883a 	mov	r4,r19
    84d4:	000b883a 	mov	r5,zero
    84d8:	18c7883a 	add	r3,r3,r3
    84dc:	1c800284 	addi	r18,r3,10
    84e0:	84a5883a 	add	r18,r16,r18
    84e4:	00087fc0 	call	87fc <hex_nth_digit>
    84e8:	90800005 	stb	r2,0(r18)
  // end
  hf[9 + 2 * md->bytecount + 2] = '\r';
    84ec:	88800017 	ldw	r2,0(r17)
    84f0:	00c00344 	movi	r3,13
    84f4:	1085883a 	add	r2,r2,r2
    84f8:	8085883a 	add	r2,r16,r2
    84fc:	10c002c5 	stb	r3,11(r2)
  hf[9 + 2 * md->bytecount + 3] = '\n';
    8500:	88800017 	ldw	r2,0(r17)
    8504:	00c00284 	movi	r3,10
    8508:	1085883a 	add	r2,r2,r2
    850c:	8085883a 	add	r2,r16,r2
    8510:	10c00305 	stb	r3,12(r2)
  hf[9 + 2 * md->bytecount + 4] = '\0';
    8514:	88800017 	ldw	r2,0(r17)
    8518:	1085883a 	add	r2,r2,r2
    851c:	80a1883a 	add	r16,r16,r2
    8520:	80000345 	stb	zero,13(r16)
}
    8524:	dfc00717 	ldw	ra,28(sp)
    8528:	dd800617 	ldw	r22,24(sp)
    852c:	dd400517 	ldw	r21,20(sp)
    8530:	dd000417 	ldw	r20,16(sp)
    8534:	dcc00317 	ldw	r19,12(sp)
    8538:	dc800217 	ldw	r18,8(sp)
    853c:	dc400117 	ldw	r17,4(sp)
    8540:	dc000017 	ldw	r16,0(sp)
    8544:	dec00804 	addi	sp,sp,32
    8548:	f800283a 	ret

0000854c <assert_clock>:
#include "altera_avalon_pio_regs.h"

#include "clock.h"

void assert_clock() {
  IOWR_ALTERA_AVALON_PIO_DATA(CLOCK_BASE, 1);
    854c:	00801c04 	movi	r2,112
    8550:	00c00044 	movi	r3,1
    8554:	10c00035 	stwio	r3,0(r2)
    8558:	f800283a 	ret

0000855c <negate_clock>:
}
void negate_clock() {
  IOWR_ALTERA_AVALON_PIO_DATA(CLOCK_BASE, 0);
    855c:	00801c04 	movi	r2,112
    8560:	10000035 	stwio	zero,0(r2)
    8564:	f800283a 	ret

00008568 <assert_prg_we>:
#include "altera_avalon_pio_regs.h"

#include "memory.h"

void assert_prg_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_WE_BASE, 1);
    8568:	00801404 	movi	r2,80
    856c:	00c00044 	movi	r3,1
    8570:	10c00035 	stwio	r3,0(r2)
    8574:	f800283a 	ret

00008578 <negate_prg_we>:
};

void negate_prg_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_WE_BASE, 0);
    8578:	00801404 	movi	r2,80
    857c:	10000035 	stwio	zero,0(r2)
    8580:	f800283a 	ret

00008584 <assert_prg_clock>:
};

void assert_prg_clock() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_CLOCK_BASE, 1);
    8584:	00801004 	movi	r2,64
    8588:	00c00044 	movi	r3,1
    858c:	10c00035 	stwio	r3,0(r2)
    8590:	f800283a 	ret

00008594 <negate_prg_clock>:
};

void negate_prg_clock() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_CLOCK_BASE, 0);
    8594:	00801004 	movi	r2,64
    8598:	10000035 	stwio	zero,0(r2)
    859c:	f800283a 	ret

000085a0 <memory_wd>:
};

////////
void memory_wd(const char addr, const char data) {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_MA_BASE, addr);
    85a0:	21003fcc 	andi	r4,r4,255
    85a4:	2100201c 	xori	r4,r4,128
    85a8:	213fe004 	addi	r4,r4,-128
    85ac:	00800404 	movi	r2,16
    85b0:	11000035 	stwio	r4,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_WD_BASE, data);
    85b4:	29403fcc 	andi	r5,r5,255
    85b8:	2940201c 	xori	r5,r5,128
    85bc:	297fe004 	addi	r5,r5,-128
    85c0:	00800804 	movi	r2,32
    85c4:	11400035 	stwio	r5,0(r2)
#include "altera_avalon_pio_regs.h"

#include "memory.h"

void assert_prg_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_WE_BASE, 1);
    85c8:	00c00044 	movi	r3,1
    85cc:	00801404 	movi	r2,80
    85d0:	10c00035 	stwio	r3,0(r2)
void negate_prg_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_WE_BASE, 0);
};

void assert_prg_clock() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_CLOCK_BASE, 1);
    85d4:	01001004 	movi	r4,64
    85d8:	20c00035 	stwio	r3,0(r4)
};

void negate_prg_clock() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_CLOCK_BASE, 0);
    85dc:	0007883a 	mov	r3,zero
    85e0:	20c00035 	stwio	r3,0(r4)
void assert_prg_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_WE_BASE, 1);
};

void negate_prg_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_WE_BASE, 0);
    85e4:	10c00035 	stwio	r3,0(r2)
    85e8:	f800283a 	ret

000085ec <memory_rd>:
  negate_prg_clock();
  negate_prg_we();
}

char memory_rd(const char addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_MA_BASE, addr);
    85ec:	21003fcc 	andi	r4,r4,255
    85f0:	2100201c 	xori	r4,r4,128
    85f4:	213fe004 	addi	r4,r4,-128
    85f8:	00800404 	movi	r2,16
    85fc:	11000035 	stwio	r4,0(r2)
void negate_prg_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_WE_BASE, 0);
};

void assert_prg_clock() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_CLOCK_BASE, 1);
    8600:	00801004 	movi	r2,64
    8604:	00c00044 	movi	r3,1
    8608:	10c00035 	stwio	r3,0(r2)
};

void negate_prg_clock() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_CLOCK_BASE, 0);
    860c:	10000035 	stwio	zero,0(r2)
char memory_rd(const char addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_MA_BASE, addr);
  assert_prg_clock();
  negate_prg_clock();
  return (char)IORD_ALTERA_AVALON_PIO_DATA(PRG_RD_BASE);
}
    8610:	00800c04 	movi	r2,48
    8614:	10800037 	ldwio	r2,0(r2)
    8618:	f800283a 	ret

0000861c <assert_reset>:
#include "altera_avalon_pio_regs.h"

#include "reset.h"

void assert_reset() {
  IOWR_ALTERA_AVALON_PIO_DATA(RESET_BASE, 1);
    861c:	00801804 	movi	r2,96
    8620:	00c00044 	movi	r3,1
    8624:	10c00035 	stwio	r3,0(r2)
    8628:	f800283a 	ret

0000862c <negate_reset>:
}
void negate_reset() {
  IOWR_ALTERA_AVALON_PIO_DATA(RESET_BASE, 0);
    862c:	00801804 	movi	r2,96
    8630:	10000035 	stwio	zero,0(r2)
    8634:	f800283a 	ret

00008638 <getchar>:
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    8638:	000895c1 	jmpi	895c <alt_getchar>

0000863c <getstr>:
  //alt_putchar(c); // echo back (remove if not needed)
  return c;
}

void getstr(char* str) { // read one line, skip '_'
    863c:	defffa04 	addi	sp,sp,-24
    8640:	dd000415 	stw	r20,16(sp)
    8644:	dcc00315 	stw	r19,12(sp)
    8648:	dc800215 	stw	r18,8(sp)
    864c:	dc400115 	stw	r17,4(sp)
    8650:	dc000015 	stw	r16,0(sp)
    8654:	dfc00515 	stw	ra,20(sp)
    8658:	2023883a 	mov	r17,r4
  int c;
  int index;

  index = 0;
    865c:	0021883a 	mov	r16,zero
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    8660:	000895c0 	call	895c <alt_getchar>
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    8664:	04c00344 	movi	r19,13
    8668:	04800284 	movi	r18,10
    if (c != '_') {
    866c:	050017c4 	movi	r20,95
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    8670:	14c00a1e 	bne	r2,r19,869c <getstr+0x60>
      str[index] = (char)c;
      index++;
    }
    c = getchar();
  }
  str[index] = '\0';
    8674:	8c21883a 	add	r16,r17,r16
    8678:	80000005 	stb	zero,0(r16)
  return;
}
    867c:	dfc00517 	ldw	ra,20(sp)
    8680:	dd000417 	ldw	r20,16(sp)
    8684:	dcc00317 	ldw	r19,12(sp)
    8688:	dc800217 	ldw	r18,8(sp)
    868c:	dc400117 	ldw	r17,4(sp)
    8690:	dc000017 	ldw	r16,0(sp)
    8694:	dec00604 	addi	sp,sp,24
    8698:	f800283a 	ret
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    869c:	14bff526 	beq	r2,r18,8674 <_gp+0xffff7a44>
    if (c != '_') {
    86a0:	15000326 	beq	r2,r20,86b0 <getstr+0x74>
      str[index] = (char)c;
    86a4:	8c07883a 	add	r3,r17,r16
    86a8:	18800005 	stb	r2,0(r3)
      index++;
    86ac:	84000044 	addi	r16,r16,1
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    86b0:	000895c0 	call	895c <alt_getchar>
    86b4:	003fee06 	br	8670 <_gp+0xffff7a40>

000086b8 <putstr>:
  str[index] = '\0';
  return;
}

void putstr(const char* str) {
	alt_putstr(str);
    86b8:	00089cc1 	jmpi	89cc <alt_putstr>

000086bc <tx_str>:
}

void tx_str(const char* str) {
  alt_putstr(str);
    86bc:	00089cc1 	jmpi	89cc <alt_putstr>

000086c0 <rx_str>:
}

void rx_str(char* str) {
  getstr(str);
    86c0:	000863c1 	jmpi	863c <getstr>

000086c4 <hexchar_to_int>:
 *      Author: yoshiaki
 */

#include "hexchar_int.h"

int hexchar_to_int(const char c) {
    86c4:	213ff404 	addi	r4,r4,-48
    86c8:	21003fcc 	andi	r4,r4,255
    86cc:	00800584 	movi	r2,22
    86d0:	11000536 	bltu	r2,r4,86e8 <hexchar_to_int+0x24>
    86d4:	00800074 	movhi	r2,1
    86d8:	10a2ec84 	addi	r2,r2,-29774
    86dc:	1109883a 	add	r4,r2,r4
    86e0:	20800007 	ldb	r2,0(r4)
    86e4:	f800283a 	ret
  int value;
  switch (c) {
    86e8:	00bfffc4 	movi	r2,-1
    case 'E': value = 0x0E; break;
    case 'F': value = 0x0F; break;
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}
    86ec:	f800283a 	ret

000086f0 <hex2chars_to_int>:

int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
    86f0:	21003fcc 	andi	r4,r4,255
    86f4:	2100201c 	xori	r4,r4,128
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
    86f8:	defffd04 	addi	sp,sp,-12
  const int v0 = hexchar_to_int(c0);
    86fc:	213fe004 	addi	r4,r4,-128
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
    8700:	dfc00215 	stw	ra,8(sp)
    8704:	dc400115 	stw	r17,4(sp)
    8708:	dc000015 	stw	r16,0(sp)
    870c:	2823883a 	mov	r17,r5
  const int v0 = hexchar_to_int(c0);
    8710:	00086c40 	call	86c4 <hexchar_to_int>
  const int v1 = hexchar_to_int(c1);
    8714:	89003fcc 	andi	r4,r17,255
    8718:	2100201c 	xori	r4,r4,128
    871c:	213fe004 	addi	r4,r4,-128
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
    8720:	1021883a 	mov	r16,r2
  const int v1 = hexchar_to_int(c1);
    8724:	00086c40 	call	86c4 <hexchar_to_int>
    8728:	1007883a 	mov	r3,r2

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    872c:	00bfffc4 	movi	r2,-1
    8730:	80800426 	beq	r16,r2,8744 <hex2chars_to_int+0x54>
    8734:	18800526 	beq	r3,r2,874c <hex2chars_to_int+0x5c>
    return HEX_CONVERTING_ERR;
  }

  return (v0 << 4) + v1;
    8738:	8004913a 	slli	r2,r16,4
    873c:	10c5883a 	add	r2,r2,r3
    8740:	00000306 	br	8750 <hex2chars_to_int+0x60>
int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
  const int v1 = hexchar_to_int(c1);

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    return HEX_CONVERTING_ERR;
    8744:	8005883a 	mov	r2,r16
    8748:	00000106 	br	8750 <hex2chars_to_int+0x60>
    874c:	1805883a 	mov	r2,r3
  }

  return (v0 << 4) + v1;
}
    8750:	dfc00217 	ldw	ra,8(sp)
    8754:	dc400117 	ldw	r17,4(sp)
    8758:	dc000017 	ldw	r16,0(sp)
    875c:	dec00304 	addi	sp,sp,12
    8760:	f800283a 	ret

00008764 <hex4chars_to_int>:

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
    8764:	21003fcc 	andi	r4,r4,255
    8768:	29403fcc 	andi	r5,r5,255
    876c:	2100201c 	xori	r4,r4,128
    8770:	2940201c 	xori	r5,r5,128
  }

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
    8774:	defffc04 	addi	sp,sp,-16
  const int v0 = hex2chars_to_int(c0, c1);
    8778:	213fe004 	addi	r4,r4,-128
    877c:	297fe004 	addi	r5,r5,-128
  }

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
    8780:	dfc00315 	stw	ra,12(sp)
    8784:	dc800215 	stw	r18,8(sp)
    8788:	dc400115 	stw	r17,4(sp)
    878c:	3025883a 	mov	r18,r6
    8790:	3823883a 	mov	r17,r7
    8794:	dc000015 	stw	r16,0(sp)
  const int v0 = hex2chars_to_int(c0, c1);
    8798:	00086f00 	call	86f0 <hex2chars_to_int>
  const int v1 = hex2chars_to_int(c2, c3);
    879c:	91003fcc 	andi	r4,r18,255
    87a0:	89403fcc 	andi	r5,r17,255
    87a4:	2100201c 	xori	r4,r4,128
    87a8:	2940201c 	xori	r5,r5,128
    87ac:	213fe004 	addi	r4,r4,-128
    87b0:	297fe004 	addi	r5,r5,-128

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
    87b4:	1021883a 	mov	r16,r2
  const int v1 = hex2chars_to_int(c2, c3);
    87b8:	00086f00 	call	86f0 <hex2chars_to_int>
    87bc:	1007883a 	mov	r3,r2

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    87c0:	00bfffc4 	movi	r2,-1
    87c4:	80800426 	beq	r16,r2,87d8 <hex4chars_to_int+0x74>
    87c8:	18800526 	beq	r3,r2,87e0 <hex4chars_to_int+0x7c>
    return HEX_CONVERTING_ERR;
  }

  return (v0 << 8) + v1;
    87cc:	8004923a 	slli	r2,r16,8
    87d0:	10c5883a 	add	r2,r2,r3
    87d4:	00000306 	br	87e4 <hex4chars_to_int+0x80>
int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
  const int v1 = hex2chars_to_int(c2, c3);

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    return HEX_CONVERTING_ERR;
    87d8:	8005883a 	mov	r2,r16
    87dc:	00000106 	br	87e4 <hex4chars_to_int+0x80>
    87e0:	1805883a 	mov	r2,r3
  }

  return (v0 << 8) + v1;
}
    87e4:	dfc00317 	ldw	ra,12(sp)
    87e8:	dc800217 	ldw	r18,8(sp)
    87ec:	dc400117 	ldw	r17,4(sp)
    87f0:	dc000017 	ldw	r16,0(sp)
    87f4:	dec00404 	addi	sp,sp,16
    87f8:	f800283a 	ret

000087fc <hex_nth_digit>:

char hex_nth_digit(const int number, const int nth) {
  const char nth_digit = (char)((number >> (nth * 4)) & 0xF);
    87fc:	294b883a 	add	r5,r5,r5
    8800:	294b883a 	add	r5,r5,r5
    8804:	2149d83a 	sra	r4,r4,r5
    8808:	214003cc 	andi	r5,r4,15
    880c:	01000074 	movhi	r4,1
    8810:	2122e884 	addi	r4,r4,-29790
    8814:	214b883a 	add	r5,r4,r5
    case 0xF: hex = 'F'; break;
    default:  hex = 'x'; break;
  }

  return hex;
}
    8818:	28800003 	ldbu	r2,0(r5)
    881c:	f800283a 	ret

00008820 <bytecount_of_hexformat>:
#include "hexchar_int.h"

#include "hexformat.h"

int bytecount_of_hexformat(const char* hf){
    8820:	2005883a 	mov	r2,r4
  const int offset = 1;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8824:	11400087 	ldb	r5,2(r2)
    8828:	21000047 	ldb	r4,1(r4)
    882c:	00086f01 	jmpi	86f0 <hex2chars_to_int>

00008830 <address_of_hexformat>:
}
int address_of_hexformat(const char* hf) {
    8830:	2005883a 	mov	r2,r4
  const int offset = 3;
  return hex4chars_to_int(hf[offset+0], hf[offset+1], hf[offset+2], hf[offset+3]);
    8834:	11400107 	ldb	r5,4(r2)
    8838:	210000c7 	ldb	r4,3(r4)
    883c:	11800147 	ldb	r6,5(r2)
    8840:	11c00187 	ldb	r7,6(r2)
    8844:	00087641 	jmpi	8764 <hex4chars_to_int>

00008848 <recordtype_of_hexformat>:
}

int recordtype_of_hexformat(const char* hf) {
    8848:	2005883a 	mov	r2,r4
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
    884c:	11400207 	ldb	r5,8(r2)
    8850:	210001c7 	ldb	r4,7(r4)
    8854:	00086f01 	jmpi	86f0 <hex2chars_to_int>

00008858 <data_of_hexformat>:
}

char data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 2 * n;
    8858:	294b883a 	add	r5,r5,r5
int recordtype_of_hexformat(const char* hf) {
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
}

char data_of_hexformat(const char* hf, const int n) {
    885c:	deffff04 	addi	sp,sp,-4
  const int offset = 9 + 2 * n;
    8860:	29400244 	addi	r5,r5,9
int recordtype_of_hexformat(const char* hf) {
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
}

char data_of_hexformat(const char* hf, const int n) {
    8864:	dfc00015 	stw	ra,0(sp)
  const int offset = 9 + 2 * n;
  const int d0 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8868:	214b883a 	add	r5,r4,r5
    886c:	29000007 	ldb	r4,0(r5)
    8870:	29400047 	ldb	r5,1(r5)
    8874:	00086f00 	call	86f0 <hex2chars_to_int>
  return d0;
}
    8878:	dfc00017 	ldw	ra,0(sp)
    887c:	dec00104 	addi	sp,sp,4
    8880:	f800283a 	ret

00008884 <checksum_of_hexformat>:

char checksum_of_hexformat(const char* hf) {
    8884:	defffe04 	addi	sp,sp,-8
    8888:	dfc00115 	stw	ra,4(sp)
    888c:	dc000015 	stw	r16,0(sp)
    8890:	2021883a 	mov	r16,r4
  const int offset = 9 + 2 * bytecount_of_hexformat(hf);
    8894:	00088200 	call	8820 <bytecount_of_hexformat>
    8898:	1085883a 	add	r2,r2,r2
    889c:	10800244 	addi	r2,r2,9
  return (char)(hex2chars_to_int(hf[offset+0], hf[offset+1]));
    88a0:	8085883a 	add	r2,r16,r2
    88a4:	11000007 	ldb	r4,0(r2)
    88a8:	11400047 	ldb	r5,1(r2)
    88ac:	00086f00 	call	86f0 <hex2chars_to_int>
}
    88b0:	dfc00117 	ldw	ra,4(sp)
    88b4:	dc000017 	ldw	r16,0(sp)
    88b8:	dec00204 	addi	sp,sp,8
    88bc:	f800283a 	ret

000088c0 <monitor_command>:
    return MONITOR_COMMAND_ERR;
  }
}

int unique(const char c0, const char c1) {
  return (c0 << 8) + c1;
    88c0:	20800007 	ldb	r2,0(r4)
    88c4:	1006923a 	slli	r3,r2,8
    88c8:	20800047 	ldb	r2,1(r4)
    88cc:	1885883a 	add	r2,r3,r2
  const int RM = unique('R','M');
  const int WM = unique('W','M');
  //
  const int command = unique(str[0], str[1]);

  if (command == AR) {
    88d0:	00d05484 	movi	r3,16722
    88d4:	10c00c26 	beq	r2,r3,8908 <monitor_command+0x48>
    return MONITOR_COMMAND_AR;
  } else if (command == NR) {
    88d8:	00d39484 	movi	r3,20050
    88dc:	10c00c26 	beq	r2,r3,8910 <monitor_command+0x50>
    return MONITOR_COMMAND_NR;
  } else if (command == AC) {
    88e0:	00d050c4 	movi	r3,16707
    88e4:	10c00c26 	beq	r2,r3,8918 <monitor_command+0x58>
    return MONITOR_COMMAND_AC;
  } else if (command == NC) {
    88e8:	00d390c4 	movi	r3,20035
    88ec:	10c00c26 	beq	r2,r3,8920 <monitor_command+0x60>
    return MONITOR_COMMAND_NC;
  } else if (command == RM) {
    88f0:	00d49344 	movi	r3,21069
    88f4:	10c00c26 	beq	r2,r3,8928 <monitor_command+0x68>
    return MONITOR_COMMAND_RM;
  } else if (command == WM) {
    88f8:	00d5d344 	movi	r3,22349
    88fc:	10c00c26 	beq	r2,r3,8930 <monitor_command+0x70>
    return MONITOR_COMMAND_WM;
  } else {
    return MONITOR_COMMAND_ERR;
    8900:	00bfffc4 	movi	r2,-1
    8904:	f800283a 	ret
  const int WM = unique('W','M');
  //
  const int command = unique(str[0], str[1]);

  if (command == AR) {
    return MONITOR_COMMAND_AR;
    8908:	00800044 	movi	r2,1
    890c:	f800283a 	ret
  } else if (command == NR) {
    return MONITOR_COMMAND_NR;
    8910:	00800084 	movi	r2,2
    8914:	f800283a 	ret
  } else if (command == AC) {
    return MONITOR_COMMAND_AC;
    8918:	008000c4 	movi	r2,3
    891c:	f800283a 	ret
  } else if (command == NC) {
    return MONITOR_COMMAND_NC;
    8920:	00800104 	movi	r2,4
    8924:	f800283a 	ret
  } else if (command == RM) {
    return MONITOR_COMMAND_RM;
    8928:	00800144 	movi	r2,5
    892c:	f800283a 	ret
  } else if (command == WM) {
    return MONITOR_COMMAND_WM;
    8930:	00800184 	movi	r2,6
  } else {
    return MONITOR_COMMAND_ERR;
  }
}
    8934:	f800283a 	ret

00008938 <unique>:

int unique(const char c0, const char c1) {
  return (c0 << 8) + c1;
    8938:	21003fcc 	andi	r4,r4,255
    893c:	2100201c 	xori	r4,r4,128
    8940:	213fe004 	addi	r4,r4,-128
    8944:	2008923a 	slli	r4,r4,8
    8948:	28803fcc 	andi	r2,r5,255
    894c:	1080201c 	xori	r2,r2,128
    8950:	10bfe004 	addi	r2,r2,-128
}
    8954:	2085883a 	add	r2,r4,r2
    8958:	f800283a 	ret

0000895c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    895c:	00800074 	movhi	r2,1
    8960:	10a2f604 	addi	r2,r2,-29736
    8964:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8968:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    896c:	01000074 	movhi	r4,1
    8970:	21230d04 	addi	r4,r4,-29644
    8974:	d80b883a 	mov	r5,sp
    8978:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    897c:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8980:	0008a280 	call	8a28 <altera_avalon_uart_read>
    8984:	0080020e 	bge	zero,r2,8990 <alt_getchar+0x34>
        return -1;
    }
    return c;
    8988:	d8800007 	ldb	r2,0(sp)
    898c:	00000106 	br	8994 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    8990:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    8994:	dfc00117 	ldw	ra,4(sp)
    8998:	dec00204 	addi	sp,sp,8
    899c:	f800283a 	ret

000089a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    89a0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    89a4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    89a8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    89ac:	0008a040 	call	8a04 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    89b0:	0008a240 	call	8a24 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    89b4:	d1200a17 	ldw	r4,-32728(gp)
    89b8:	d1600917 	ldw	r5,-32732(gp)
    89bc:	d1a00817 	ldw	r6,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    89c0:	dfc00017 	ldw	ra,0(sp)
    89c4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    89c8:	00081341 	jmpi	8134 <main>

000089cc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    89cc:	defffe04 	addi	sp,sp,-8
    89d0:	dc000015 	stw	r16,0(sp)
    89d4:	dfc00115 	stw	ra,4(sp)
    89d8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    89dc:	0008b540 	call	8b54 <strlen>
    89e0:	01000074 	movhi	r4,1
    89e4:	21230d04 	addi	r4,r4,-29644
    89e8:	800b883a 	mov	r5,r16
    89ec:	100d883a 	mov	r6,r2
    89f0:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
    89f4:	dfc00117 	ldw	ra,4(sp)
    89f8:	dc000017 	ldw	r16,0(sp)
    89fc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8a00:	0008ab41 	jmpi	8ab4 <altera_avalon_uart_write>

00008a04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8a04:	deffff04 	addi	sp,sp,-4
    8a08:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    8a0c:	0008b4c0 	call	8b4c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8a10:	00800044 	movi	r2,1
    8a14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8a18:	dfc00017 	ldw	ra,0(sp)
    8a1c:	dec00104 	addi	sp,sp,4
    8a20:	f800283a 	ret

00008a24 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8a24:	f800283a 	ret

00008a28 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    8a28:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    8a2c:	20c00017 	ldw	r3,0(r4)
    8a30:	18c00204 	addi	r3,r3,8
    8a34:	18800037 	ldwio	r2,0(r3)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    8a38:	18000035 	stwio	zero,0(r3)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    8a3c:	10c0200c 	andi	r3,r2,128
    8a40:	1800021e 	bne	r3,zero,8a4c <altera_avalon_uart_read+0x24>
      {
        return 1;
      }
    }
  }
  while (block);
    8a44:	383ff926 	beq	r7,zero,8a2c <_gp+0xffff7dfc>
    8a48:	00000706 	br	8a68 <altera_avalon_uart_read+0x40>

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    8a4c:	20c00017 	ldw	r3,0(r4)
    8a50:	18c00037 	ldwio	r3,0(r3)
    8a54:	28c00005 	stb	r3,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    8a58:	108000cc 	andi	r2,r2,3
    8a5c:	103ff91e 	bne	r2,zero,8a44 <_gp+0xffff7e14>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    8a60:	00800044 	movi	r2,1
    8a64:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8a68:	00800074 	movhi	r2,1
    8a6c:	10a31304 	addi	r2,r2,-29620
    8a70:	10800017 	ldw	r2,0(r2)
    8a74:	10000926 	beq	r2,zero,8a9c <altera_avalon_uart_read+0x74>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    8a78:	deffff04 	addi	sp,sp,-4
    8a7c:	dfc00015 	stw	ra,0(sp)
    8a80:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
    8a84:	00c002c4 	movi	r3,11
    8a88:	10c00015 	stw	r3,0(r2)
 
  return 0;
    8a8c:	0005883a 	mov	r2,zero
}
    8a90:	dfc00017 	ldw	ra,0(sp)
    8a94:	dec00104 	addi	sp,sp,4
    8a98:	f800283a 	ret
    8a9c:	00800074 	movhi	r2,1
    8aa0:	10a31804 	addi	r2,r2,-29600
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
    8aa4:	00c002c4 	movi	r3,11
    8aa8:	10c00015 	stw	r3,0(r2)
 
  return 0;
    8aac:	0005883a 	mov	r2,zero
}
    8ab0:	f800283a 	ret

00008ab4 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    8ab4:	defffd04 	addi	sp,sp,-12
    8ab8:	dc400115 	stw	r17,4(sp)
    8abc:	dc000015 	stw	r16,0(sp)
    8ac0:	dfc00215 	stw	ra,8(sp)
    8ac4:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    8ac8:	39d0000c 	andi	r7,r7,16384
  count = len;
    8acc:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    8ad0:	20800017 	ldw	r2,0(r4)
    8ad4:	10c00237 	ldwio	r3,8(r2)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    8ad8:	18c0100c 	andi	r3,r3,64
    8adc:	18000526 	beq	r3,zero,8af4 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    8ae0:	28c00044 	addi	r3,r5,1
    8ae4:	29400007 	ldb	r5,0(r5)
    8ae8:	11400135 	stwio	r5,4(r2)
      count--;
    8aec:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    8af0:	180b883a 	mov	r5,r3
      count--;
    }
  }
  while (block && count);
    8af4:	3800021e 	bne	r7,zero,8b00 <altera_avalon_uart_write+0x4c>
    8af8:	803ff51e 	bne	r16,zero,8ad0 <_gp+0xffff7ea0>
    8afc:	00000b06 	br	8b2c <altera_avalon_uart_write+0x78>

  if (count)
    8b00:	80000a26 	beq	r16,zero,8b2c <altera_avalon_uart_write+0x78>
    8b04:	00800074 	movhi	r2,1
    8b08:	10a31304 	addi	r2,r2,-29620
    8b0c:	10800017 	ldw	r2,0(r2)
    8b10:	10000226 	beq	r2,zero,8b1c <altera_avalon_uart_write+0x68>
    8b14:	103ee83a 	callr	r2
    8b18:	00000206 	br	8b24 <altera_avalon_uart_write+0x70>
    8b1c:	00800074 	movhi	r2,1
    8b20:	10a31804 	addi	r2,r2,-29600
  {
    ALT_ERRNO = EWOULDBLOCK;
    8b24:	00c002c4 	movi	r3,11
    8b28:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    8b2c:	8c05c83a 	sub	r2,r17,r16
    8b30:	dfc00217 	ldw	ra,8(sp)
    8b34:	dc400117 	ldw	r17,4(sp)
    8b38:	dc000017 	ldw	r16,0(sp)
    8b3c:	dec00304 	addi	sp,sp,12
    8b40:	f800283a 	ret

00008b44 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    8b44:	3005883a 	mov	r2,r6
    8b48:	f800283a 	ret

00008b4c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8b4c:	000170fa 	wrctl	ienable,zero
    8b50:	f800283a 	ret

00008b54 <strlen>:
    8b54:	2005883a 	mov	r2,r4
    8b58:	10c00007 	ldb	r3,0(r2)
    8b5c:	18000226 	beq	r3,zero,8b68 <strlen+0x14>
    8b60:	10800044 	addi	r2,r2,1
    8b64:	003ffc06 	br	8b58 <_gp+0xffff7f28>
    8b68:	1105c83a 	sub	r2,r2,r4
    8b6c:	f800283a 	ret
